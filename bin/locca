#!/usr/bin/env ruby
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Evgeny Shurakov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

require 'gli'
require 'locca'
require 'set'

include GLI::App

program_desc 'Application localization kit'

version Locca::VERSION

desc 'Work dir'
arg_name '<path>'
flag ['work-dir'.to_sym]

desc 'Create and update language files from source code'
command :build do |c|
    c.action do |global_options, options, args|

        work_dir = global_options['work-dir'.to_sym]
        if not work_dir
            work_dir = Dir.getwd
        end

        $locca.build(project_in_dir(work_dir))
    end
end

desc 'Merge translations from source file to destination file (add missing, update existing)'
command :merge do |c|
    c.action do |global_options, options, args|
        if args.count != 2
            raise 'You should pass source file path and destination file path'
        end
        $locca.merge(args[0], args[1])
    end 
end

desc 'Sync (fetch, merge and upload new) translations with external translation service'
command :sync do |c|
    c.action do |global_options, options, args|
        work_dir = global_options['work-dir'.to_sym]
        if not work_dir
            work_dir = Dir.getwd
        end

        $locca.sync(project_in_dir(work_dir))
    end  
end

desc 'Fetch and merge translations from external translation service'
command :fetch do |c|
    c.action do |global_options, options, args|
        work_dir = global_options['work-dir'.to_sym]
        if not work_dir
            work_dir = Dir.getwd
        end

        $locca.fetch(project_in_dir(work_dir))
    end  
end

desc 'Translate the untranslated'
command :translate do |c|
    c.action do |global_options, options, args|
        work_dir = global_options['work-dir'.to_sym]
        if not work_dir
            work_dir = Dir.getwd
        end

        $locca.translate(project_in_dir(work_dir), args[0])
    end  
end

pre do |global, command, options, args|
    $locca = Locca::Locca.new()
    true
end

post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
end

on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    puts exception.backtrace
    true
end

def project_in_dir(dir)
    project_dir_locator = Locca::ProjectDirLocator.new()
    config_reader = Locca::ConfigReader.new()
    project_factory = Locca::ProjectFactory.new(project_dir_locator, config_reader)

    project = project_factory.new_project(dir)
end

exit run(ARGV)
