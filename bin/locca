#!/usr/bin/env ruby
require 'gli'
require 'locca'
require 'set'

include GLI::App

program_desc 'Application localization kit'

version Locca::VERSION

desc 'Work dir'
arg_name '<path>'
flag ['work-dir'.to_sym]

desc 'Create and update language files from source code'
command :build do |c|
    c.action do |global_options, options, args|
        $locca.build()
    end
end

# desc 'Translate files'
# arg_name 'language'
# command :translate do |c|
#     c.action do |global_options, options, args|
#         if !args || args.count == 0 || !args[0]
#             exit_now!("Language should be passed as an argument")
#         end

#         $locca.translate(args[0])
#     end
# end

pre do |global, command, options, args|
    work_dir = global['work-dir'.to_sym]
    if not work_dir
        work_dir = Dir.getwd
    end
    project_dir_locator = Locca::ProjectDirLocator.new()
    config_reader = Locca::ConfigReader.new()
    config_validator = Locca::ConfigValidator.new(['code_dir', 'lang_dir'])
    project_factory = Locca::ProjectFactory.new(project_dir_locator, config_reader, config_validator)

    project = project_factory.new_project(work_dir)

    $locca = Locca::Locca.new(project)

    true
end

post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
end

on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    # puts exception.backtrace
    true
end

exit run(ARGV)
